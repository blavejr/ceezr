/**
 * Pokemon Ceezr
 * The Ceezr pokemon API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreatePokemonDto from '../model/CreatePokemonDto';
import PokemonEntity from '../model/PokemonEntity';
import UpdatePokemonDto from '../model/UpdatePokemonDto';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appControllerGetHello operation.
     * @callback module:api/DefaultApi~appControllerGetHelloCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~appControllerGetHelloCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    appControllerGetHello(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pokemonControllerCreate operation.
     * @callback module:api/DefaultApi~pokemonControllerCreateCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/CreatePokemonDto} createPokemonDto 
     * @param {module:api/DefaultApi~pokemonControllerCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    pokemonControllerCreate(createPokemonDto, callback) {
      let postBody = createPokemonDto;
      // verify the required parameter 'createPokemonDto' is set
      if (createPokemonDto === undefined || createPokemonDto === null) {
        throw new Error("Missing the required parameter 'createPokemonDto' when calling pokemonControllerCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/pokemon', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pokemonControllerDamage operation.
     * @callback module:api/DefaultApi~pokemonControllerDamageCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} attackerId 
     * @param {Number} defenderId 
     * @param {module:api/DefaultApi~pokemonControllerDamageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    pokemonControllerDamage(attackerId, defenderId, callback) {
      let postBody = null;
      // verify the required parameter 'attackerId' is set
      if (attackerId === undefined || attackerId === null) {
        throw new Error("Missing the required parameter 'attackerId' when calling pokemonControllerDamage");
      }
      // verify the required parameter 'defenderId' is set
      if (defenderId === undefined || defenderId === null) {
        throw new Error("Missing the required parameter 'defenderId' when calling pokemonControllerDamage");
      }

      let pathParams = {
      };
      let queryParams = {
        'attackerId': attackerId,
        'defenderId': defenderId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/pokemon/damage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pokemonControllerFindAll operation.
     * @callback module:api/DefaultApi~pokemonControllerFindAllCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PokemonEntity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} page 
     * @param {Number} limit 
     * @param {module:api/DefaultApi~pokemonControllerFindAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PokemonEntity>}
     */
    pokemonControllerFindAll(page, limit, callback) {
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling pokemonControllerFindAll");
      }
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling pokemonControllerFindAll");
      }

      let pathParams = {
      };
      let queryParams = {
        'page': page,
        'limit': limit
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PokemonEntity];
      return this.apiClient.callApi(
        '/pokemon', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pokemonControllerFindOne operation.
     * @callback module:api/DefaultApi~pokemonControllerFindOneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PokemonEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/DefaultApi~pokemonControllerFindOneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PokemonEntity}
     */
    pokemonControllerFindOne(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling pokemonControllerFindOne");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PokemonEntity;
      return this.apiClient.callApi(
        '/pokemon/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pokemonControllerRemove operation.
     * @callback module:api/DefaultApi~pokemonControllerRemoveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/DefaultApi~pokemonControllerRemoveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pokemonControllerRemove(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling pokemonControllerRemove");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/pokemon/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pokemonControllerUpdate operation.
     * @callback module:api/DefaultApi~pokemonControllerUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PokemonEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:model/UpdatePokemonDto} updatePokemonDto 
     * @param {module:api/DefaultApi~pokemonControllerUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PokemonEntity}
     */
    pokemonControllerUpdate(id, updatePokemonDto, callback) {
      let postBody = updatePokemonDto;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling pokemonControllerUpdate");
      }
      // verify the required parameter 'updatePokemonDto' is set
      if (updatePokemonDto === undefined || updatePokemonDto === null) {
        throw new Error("Missing the required parameter 'updatePokemonDto' when calling pokemonControllerUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PokemonEntity;
      return this.apiClient.callApi(
        '/pokemon/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
